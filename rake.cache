#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-2/todolist/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/my-stuff/ruby/full-stack/fullstack-course2-module3-blogposts/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test                               # Runs all tests in test folder" "test:all                           # Run tests quickly by merging all types and not resetting db" "test:all:db                        # Run tests quickly, but also reset db" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:deprecate_all                 # " "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:single                        # " "test:units                         # " "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/Code/otb/otb_myotb_app/" ("abandoned_basket_emails:send       # Trigger abandoned basket emails through the CRM partner and purge old data" "about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "clean                              # Remove any temporary products" "clobber                            # Remove any generated files" "cucumber                           # Alias for cucumber:ok" "cucumber:all                       # Run all features" "cucumber:ok                        # Run features that should pass" "cucumber:rerun                     # Record failing features and run only them if any exist" "cucumber:statsetup                 # " "cucumber:wip                       # Run features that are being worked on" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "features                           # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "resque:failures:sort               # Sort the 'failed' queue for the redis_multi_queue failure backend" "resque:preload                     # " "resque:setup                       # " "resque:work                        # Start a Resque worker" "resque:workers                     # Start multiple Resque workers" "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "simplecov                          # Run tests" "spec                               # Run all specs in spec directory (excluding plugin specs)" "spec:adaptors                      # Run the code examples in spec/adaptors" "spec:controllers                   # Run the code examples in spec/controllers" "spec:decorators                    # Run the code examples in spec/decorators" "spec:helpers                       # Run the code examples in spec/helpers" "spec:jobs                          # Run the code examples in spec/jobs" "spec:lib                           # Run the code examples in spec/lib" "spec:mailers                       # Run the code examples in spec/mailers" "spec:models                        # Run the code examples in spec/models" "spec:prepare                       # " "spec:presenters                    # Run the code examples in spec/presenters" "spec:serializers                   # Run the code examples in spec/serializers" "spec:services                      # Run the code examples in spec/services" "spec:statsetup                     # " "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test                               # Runs all tests in test folder" "test:all                           # Run tests quickly by merging all types and not resetting db" "test:all:db                        # Run tests quickly, but also reset db" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:deprecate_all                 # " "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:single                        # " "test:units                         # " "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # " "trails:clear                       # Clean up old trail data") "/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-2/action-pack/todolists/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/my-stuff/ruby/full-stack/me/i_review/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-2/nested-resources/todolists/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/Code/otb/otb_www_app/" ("about                                    #  # List versions of all Rails frameworks and the environment" "assets:clean                             #  # Remove compiled assets" "assets:clean:all                         # " "assets:environment                       # " "assets:list_current                      #  # List the current active assets from the asset manifest" "assets:precompile                        #  # Compile all the assets named in config.assets.precompile" "assets:precompile:all                    # " "assets:precompile:nondigest              # " "assets:precompile:primary                # " "cache:search_form:clear                  #  # Clear the search form cache from Memcache" "content:homepage:refresh                 #  # Refresh all the hompage data" "content:homepage:refresh_blog            #  # Refresh blog data" "content:homepage:refresh_facebook_likes  #  # Refresh facebook like count" "cucumber                                 #  # Alias for cucumber:ok" "cucumber:all                             #  # Run all features" "cucumber:ok                              #  # Run features that should pass" "cucumber:rerun                           #  # Record failing features and run only them if any exist" "cucumber:statsetup                       # " "cucumber:wip                             #  # Run features that are being worked on" "db:_dump                                 # " "db:abort_if_pending_migrations           # " "db:charset                               # " "db:clear_expired_sessions                #  # Clear expired sessions that are older than 10 days" "db:collation                             # " "db:create                                #  # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" "db:create:all                            # " "db:drop                                  #  # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" "db:drop:all                              # " "db:extract_fixtures                      #  # Create YAML test fixtures from data in an existing database" "db:fixtures:identify                     # " "db:fixtures:load                         #  # Load fixtures into the current environment's database" "db:forward                               # " "db:load_config                           # " "db:migrate                               #  # Migrate the database (options: VERSION=x, VERBOSE=false)" "db:migrate:down                          # " "db:migrate:redo                          # " "db:migrate:reset                         # " "db:migrate:status                        #  # Display status of migrations" "db:migrate:up                            # " "db:reset                                 # " "db:rollback                              #  # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:dump                           #  # Create a db/schema.rb file that can be portably used against any DB supported by AR" "db:schema:load                           #  # Load a schema.rb file into the database" "db:schema:load_if_ruby                   # " "db:seed                                  #  # Load the seed data from db/seeds.rb" "db:sessions:clear                        # " "db:sessions:create                       # " "db:setup                                 #  # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" "db:structure:dump                        #  # Dump the database structure to db/structure.sql" "db:structure:load                        # " "db:structure:load_if_sql                 # " "db:test:clone                            # " "db:test:clone_structure                  # " "db:test:load                             # " "db:test:load_schema                      # " "db:test:load_structure                   # " "db:test:prepare                          # " "db:test:purge                            # " "db:version                               #  # Retrieves the current schema version number" "default                                  # " "doc                                      # " "doc/api                                  # " "doc/api/index.html                       # " "doc/app                                  # " "doc/app/index.html                       # " "doc:app                                  #  # Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                              # " "doc:clobber_app                          # " "doc:clobber_plugins                      # " "doc:clobber_rails                        # " "doc:guides                               # " "doc:plugins                              # " "doc:rails                                # " "doc:reapp                                # " "doc:rerails                              # " "environment                              # " "features                                 # " "i18n:js:export                           #  # Export translations to JS file(s)" "jobs:check[max_age]                      #  # Exit with error status if any jobs older than max_age seconds haven't been attempted yet" "jobs:clear                               #  # Clear the delayed_job queue" "jobs:environment_options                 # " "jobs:work                                #  # Start a delayed_job worker" "jobs:workoff                             #  # Start a delayed_job worker and exit when all available jobs are complete" "lead:deliver:leads                       #  # Deliver leads to agents" "lead:deliver:vouchers                    #  # Deliver vouchers to customers" "linguist:import                          #  # Import linguist translations into locale yml files" "linguist:sync_missing_keys               #  # Copy missing I18n keys from one locale to another" "log:clear                                #  # Truncates all *.log files in log/ to zero bytes" "middleware                               #  # Prints out your Rack middleware stack" "notes                                    #  # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                             #  # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                              # " "notes:optimize                           # " "notes:todo                               # " "otb_cms:install:migrations               #  # Copy migrations from otb_cms to application" "paperclip:clean                          #  # Cleans out invalid attachments" "paperclip:refresh                        #  # Refreshes both metadata and thumbnails" "paperclip:refresh:metadata               #  # Regenerates content_type/size metadata for a given CLASS (and optional ATTACHMENT)" "paperclip:refresh:missing_styles         #  # Regenerates missing thumbnail styles for all classes using Paperclip" "paperclip:refresh:thumbnails             #  # Regenerates thumbnails for a given CLASS (and optional ATTACHMENT and STYLES splitted by comma)" "passenger:restart                        #  # Touch to restart.txt file" "rails:template                           #  # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                     # " "rails:update                             #  # Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" "rails:update:application_controller      # " "rails:update:configs                     # " "rails:update:scripts                     # " "rails_env                                # " "railties:install:migrations              # " "resque:failures:sort                     #  # Sort the 'failed' queue for the redis_multi_queue failure backend" "resque:preload                           # " "resque:setup                             # " "resque:work                              #  # Start a Resque worker" "resque:workers                           #  # Start multiple Resque workers" "routes                                   #  # Print out all defined routes in match order, with names" "secret                                   #  # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "secure_headers:generate_hashes           # " "spec                                     #  # Run all specs in spec directory (excluding plugin specs)" "spec:adaptors                            #  # Run the code examples in spec/adaptors" "spec:controllers                         #  # Run the code examples in spec/controllers" "spec:decorators                          #  # Run the code examples in spec/decorators" "spec:extensions                          #  # Run the code examples in spec/extensions" "spec:features                            #  # Run the code examples in spec/features" "spec:form_builders                       #  # Run the code examples in spec/form_builders" "spec:forms                               #  # Run the code examples in spec/forms" "spec:helpers                             #  # Run the code examples in spec/helpers" "spec:initializers                        #  # Run the code examples in spec/initializers" "spec:lib                                 #  # Run the code examples in spec/lib" "spec:models                              #  # Run the code examples in spec/models" "spec:prepare                             # " "spec:presenters                          #  # Run the code examples in spec/presenters" "spec:requests                            #  # Run the code examples in spec/requests" "spec:routing                             #  # Run the code examples in spec/routing" "spec:serializers                         #  # Run the code examples in spec/serializers" "spec:statsetup                           # " "spec:validators                          #  # Run the code examples in spec/validators" "state_machine:draw                       #  # Draws state machines using GraphViz (options: CLASS=User,Vehicle; FILE=user.rb,vehicle.rb [not required in Rails / Merb]; FONT=Arial; FORMAT=png; ORIENTATION=portrait; HUMAN_NAMES=true" "stats                                    #  # Report code statistics (KLOCs, etc) from the application" "teaspoon                                 #  # Run the javascript specs" "teaspoon:info                            #  # Print teaspoon and framework information" "test:prepare                             # " "time:zones:all                           #  # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                         # " "time:zones:us                            # " "tmp:cache:clear                          # " "tmp:clear                                #  # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                               #  # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                           # " "tmp:sessions:clear                       # " "tmp:sockets:clear                        # ") "/home/timothymillar/Code/otb/otb_payments_app/" ("about                                # List versions of all Rails frameworks and the environment" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" "db:create:all                        # " "db:drop                              # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:dump                       # Create a db/schema.rb file that can be portably used against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:sessions:clear                    # " "db:sessions:create                   # " "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # " "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_structure              # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "default                              # " "doc                                  # " "doc/api                              # " "doc/api/index.html                   # " "doc/app                              # " "doc/app/index.html                   # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_plugins                  # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:plugins                          # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "log:clear                            # Truncates all *.log files in log/ to zero bytes" "middleware                           # Prints out your Rack middleware stack" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" "rails:update:application_controller  # " "rails:update:configs                 # " "rails:update:scripts                 # " "rails_env                            # " "railties:install:migrations          # " "routes                               # Print out all defined routes in match order, with names" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                                 # Run all specs in spec directory (excluding plugin specs)" "spec:adaptors                        # Run the code examples in spec/adaptors" "spec:controllers                     # Run the code examples in spec/controllers" "spec:features                        # Run the code examples in spec/features" "spec:integration                     # Run the code examples in spec/integration" "spec:lib                             # Run the code examples in spec/lib" "spec:models                          # Run the code examples in spec/models" "spec:prepare                         # " "spec:serializers                     # Run the code examples in spec/serializers" "spec:statsetup                       # " "stats                                # Report code statistics (KLOCs, etc) from the application" "test:prepare                         # " "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ") "/home/timothymillar/my-stuff/ruby/rails/chatter/" ("about                              # List versions of all Rails frameworks and the environment" "app:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                 # " "app:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:bin                     # " "app:update:configs                 # " "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:check_protected_environments    # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:_unsafe                    # " "db:drop:all                        # " "db:environment:set                 # Set the environment value for the database" "db:fixtures:identify               # " "db:fixtures:load                   # Loads fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clears a db/schema_cache.dump file" "db:schema:cache:dump               # Creates a db/schema_cache.dump file" "db:schema:dump                     # Creates a db/schema.rb file that is portable against any DB supported by Active Record" "db:schema:load                     # Loads a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Loads the seed data from db/seeds.rb" "db:setup                           # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dumps the database structure to db/structure.sql" "db:structure:load                  # Recreates the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "dev:cache                          # Toggle development mode caching on/off" "environment                        # " "initializers                       # Print out all defined initializers in the order they are invoked by Rails" "log:clear                          # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # " "rails:templates:copy               # " "rails:update                       # " "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "restart                            # Restart app by touching tmp/restart.txt" "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test                               # Runs all tests in test folder" "test:controllers                   # " "test:db                            # Run tests quickly, but also reset db" "test:functionals                   # " "test:generators                    # " "test:helpers                       # " "test:integration                   # " "test:jobs                          # " "test:mailers                       # " "test:models                        # " "test:prepare                       # " "test:run                           # " "test:units                         # " "time:zones[country_or_offset]      # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list by UTC offset (`rails time:zones[-8]`)" "time:zones:all                     # " "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/pids                           # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear cache and socket files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sockets:clear                  # ") "/home/timothymillar/Code/otb/otb_customer_myb_app/" ("about                                # List versions of all Rails frameworks and the environment" "clean                                # Remove any temporary products" "clobber                              # Remove any generated files" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Create the database from DATABASE_URL or config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)" "db:create:all                        # " "db:drop                              # Drops the database using DATABASE_URL or the current Rails.env (use db:drop:all to drop all databases)" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:myb:abort_if_pending_migrations   # Raises an error if there are any pending migrations" "db:myb:migrate                       # Migrate the database through scripts in db/compatibility_migrate" "db:myb:rollback                      # Rolls the compatibility schema back to the previous version" "db:myb:schema:dump                   # Create a db/myb_schema.rb file that can be portably used against any DB supported by AR" "db:myb:schema:load                   # Load a schema.rb file into the database" "db:myb:structure:dump                # Dump the database structure to a SQL file" "db:myb:test:clone_structure          # Recreate the test databases from the development structure" "db:myb:test:drop                     # Drop the test database" "db:myb:test:load                     # Recreate the test database from the current schema.rb" "db:myb:test:purge                    # Empty the test database" "db:myb:version                       # Retrieves the current schema version number" "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:dump                       # Create a db/schema.rb file that can be portably used against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:sessions:clear                    # " "db:sessions:create                   # " "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # " "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_structure              # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "default                              # " "doc                                  # " "doc/api                              # " "doc/api/index.html                   # " "doc/app                              # " "doc/app/index.html                   # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides, doc:plugins (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_plugins                  # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:plugins                          # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "log:clear                            # Truncates all *.log files in log/ to zero bytes" "middleware                           # Prints out your Rack middleware stack" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs, update:scripts, or update:application_controller)" "rails:update:application_controller  # " "rails:update:configs                 # " "rails:update:scripts                 # " "rails_env                            # " "railties:install:migrations          # " "resque:preload                       # " "resque:setup                         # " "resque:work                          # Start a Resque worker" "resque:workers                       # Start multiple Resque workers" "routes                               # Print out all defined routes in match order, with names" "sass:update                          # Updates stylesheets if necessary from their Sass templates" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "simplecov                            # Run tests" "spec                                 # Run RSpec code examples" "spec:adaptors                        # Run the code examples in spec/adaptors" "spec:controllers                     # Run the code examples in spec/controllers" "spec:decorators                      # Run the code examples in spec/decorators" "spec:features                        # Run the code examples in spec/features" "spec:form_builders                   # Run the code examples in spec/form_builders" "spec:helpers                         # Run the code examples in spec/helpers" "spec:lib                             # Run the code examples in spec/lib" "spec:models                          # Run the code examples in spec/models" "spec:prepare                         # " "spec:presenters                      # Run the code examples in spec/presenters" "spec:routing                         # Run the code examples in spec/routing" "spec:services                        # Run the code examples in spec/services" "spec:statsetup                       # " "state_machine:draw                   # Draws state machines using GraphViz (options: CLASS=User,Vehicle; FILE=user.rb,vehicle.rb [not required in Rails / Merb]; FONT=Arial; FORMAT=png; ORIENTATION=portrait" "stats                                # Report code statistics (KLOCs, etc) from the application" "test:prepare                         # " "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ") "/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-3/integrating-mongo/raceday/" ("about                                # List versions of all Rails frameworks and the environment" "assets:clean[keep]                   # Remove old compiled assets" "assets:clobber                       # Remove compiled assets" "assets:environment                   # Load asset compile environment" "assets:precompile                    # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies           # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies    # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                        # " "db:create_indexes                    # " "db:drop                              # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:mongoid:create_indexes            # Create the indexes defined on your mongoid models" "db:mongoid:drop                      # Drops the default client database" "db:mongoid:load_models               # " "db:mongoid:purge                     # Drop all collections except the system collections" "db:mongoid:remove_indexes            # Remove the indexes defined on your mongoid models without questions" "db:mongoid:remove_undefined_indexes  # Remove indexes that exist in the database but aren't specified on the models" "db:purge                             # " "db:purge:all                         # " "db:remove_indexes                    # " "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear                # Clear a db/schema_cache.dump file" "db:schema:cache:dump                 # Create a db/schema_cache.dump file" "db:schema:dump                       # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # Recreate the databases from the structure.sql file" "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_schema                 # " "db:test:clone_structure              # " "db:test:deprecated                   # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "doc                                  # " "doc/app                              # " "doc/app/created.rid                  # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "html                                 # " "html/created.rid                     # " "log:clear                            # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                           # Prints out your Rack middleware stack" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                     # " "rails:update:configs                 # " "railties:install:migrations          # " "routes                               # Print out all defined routes in match order, with names" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                                # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp                                  # " "tmp/cache                            # " "tmp/cache/assets                     # " "tmp/cache/assets/development         # " "tmp/cache/assets/production          # " "tmp/cache/assets/test                # " "tmp/pids                             # " "tmp/sessions                         # " "tmp/sockets                          # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ") "/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-3/advanced-mongo/places/" ("about                                # List versions of all Rails frameworks and the environment" "assets:clean[keep]                   # Remove old compiled assets" "assets:clobber                       # Remove compiled assets" "assets:environment                   # Load asset compile environment" "assets:precompile                    # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies           # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies    # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                        # " "db:create_indexes                    # " "db:drop                              # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:mongoid:create_indexes            # Create the indexes defined on your mongoid models" "db:mongoid:drop                      # Drops the default client database" "db:mongoid:load_models               # " "db:mongoid:purge                     # Drop all collections except the system collections" "db:mongoid:remove_indexes            # Remove the indexes defined on your mongoid models without questions" "db:mongoid:remove_undefined_indexes  # Remove indexes that exist in the database but aren't specified on the models" "db:purge                             # " "db:purge:all                         # " "db:remove_indexes                    # " "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear                # Clear a db/schema_cache.dump file" "db:schema:cache:dump                 # Create a db/schema_cache.dump file" "db:schema:dump                       # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # Recreate the databases from the structure.sql file" "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_schema                 # " "db:test:clone_structure              # " "db:test:deprecated                   # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "doc                                  # " "doc/app                              # " "doc/app/created.rid                  # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "html                                 # " "html/created.rid                     # " "log:clear                            # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                           # Prints out your Rack middleware stack" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                     # " "rails:update:configs                 # " "railties:install:migrations          # " "routes                               # Print out all defined routes in match order, with names" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                                # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp                                  # " "tmp/cache                            # " "tmp/cache/assets                     # " "tmp/cache/assets/development         # " "tmp/cache/assets/production          # " "tmp/cache/assets/test                # " "tmp/pids                             # " "tmp/sessions                         # " "tmp/sockets                          # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ") "/home/timothymillar/my-stuff/ruby/ruby4rails/r4music1/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/Code/otb/otb_hotels_app/" ("(/home/timothymillar/Code/otb/otb_hotels_app/vendor/bundle/ruby/2.1.0/bin/rake)") "/home/timothymillar/my-stuff/ruby/full-stack/graded-assignments-3/mongoid-relationships/contests/" ("about                                # List versions of all Rails frameworks and the environment" "assets:clean[keep]                   # Remove old compiled assets" "assets:clobber                       # Remove compiled assets" "assets:environment                   # Load asset compile environment" "assets:precompile                    # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies           # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies    # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                        # " "db:create_indexes                    # " "db:drop                              # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:mongoid:create_indexes            # Create the indexes defined on your mongoid models" "db:mongoid:drop                      # Drops the default client database" "db:mongoid:load_models               # " "db:mongoid:purge                     # Drop all collections except the system collections" "db:mongoid:remove_indexes            # Remove the indexes defined on your mongoid models without questions" "db:mongoid:remove_undefined_indexes  # Remove indexes that exist in the database but aren't specified on the models" "db:purge                             # " "db:purge:all                         # " "db:remove_indexes                    # " "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear                # Clear a db/schema_cache.dump file" "db:schema:cache:dump                 # Create a db/schema_cache.dump file" "db:schema:dump                       # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # Recreate the databases from the structure.sql file" "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_schema                 # " "db:test:clone_structure              # " "db:test:deprecated                   # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "default                              # " "doc                                  # " "doc/app                              # " "doc/app/created.rid                  # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "html                                 # " "html/created.rid                     # " "log:clear                            # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                           # Prints out your Rack middleware stack" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                     # " "rails:update:configs                 # " "railties:install:migrations          # " "routes                               # Print out all defined routes in match order, with names" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                                 # Run all specs in spec directory (excluding plugin specs)" "spec:prepare                         # " "spec:statsetup                       # " "stats                                # Report code statistics (KLOCs, etc) from the application or engine" "test                                 # Runs all tests in test folder" "test:all                             # Run tests quickly by merging all types and not resetting db" "test:all:db                          # Run tests quickly, but also reset db" "test:controllers                     # " "test:db                              # Run tests quickly, but also reset db" "test:deprecate_all                   # " "test:functionals                     # " "test:generators                      # " "test:helpers                         # " "test:integration                     # " "test:jobs                            # " "test:mailers                         # " "test:models                          # " "test:prepare                         # " "test:run                             # " "test:single                          # " "test:units                           # " "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp                                  # " "tmp/cache                            # " "tmp/cache/assets                     # " "tmp/cache/assets/development         # " "tmp/cache/assets/production          # " "tmp/cache/assets/test                # " "tmp/pids                             # " "tmp/sessions                         # " "tmp/sockets                          # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ") "/home/timothymillar/my-stuff/ruby/projects/timestamp/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cucumber                           # Alias for cucumber:ok" "cucumber:all                       # Run all features" "cucumber:annotations_setup         # " "cucumber:ok                        # Run features that should pass" "cucumber:rerun                     # Record failing features and run only them if any exist" "cucumber:statsetup                 # " "cucumber:wip                       # Run features that are being worked on" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "features                           # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                               # Run all specs in spec directory (excluding plugin specs)" "spec:controllers                   # Run the code examples in spec/controllers" "spec:models                        # Run the code examples in spec/models" "spec:prepare                       # " "spec:statsetup                     # " "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "test:prepare                       # " "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ") "/home/timothymillar/my-stuff/ruby/projects/little-url/" ("about                              # List versions of all Rails frameworks and the environment" "assets:clean[keep]                 # Remove old compiled assets" "assets:clobber                     # Remove compiled assets" "assets:environment                 # Load asset compile environment" "assets:precompile                  # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies         # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies  # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                           # " "db:abort_if_pending_migrations     # " "db:charset                         # " "db:collation                       # " "db:create                          # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV it defaults to creating the development and test databases" "db:create:all                      # " "db:drop                            # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV it defaults to dropping the development and test databases" "db:drop:all                        # " "db:fixtures:identify               # " "db:fixtures:load                   # Load fixtures into the current environment's database" "db:forward                         # " "db:load_config                     # " "db:migrate                         # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                    # " "db:migrate:redo                    # " "db:migrate:reset                   # " "db:migrate:status                  # Display status of migrations" "db:migrate:up                      # " "db:purge                           # " "db:purge:all                       # " "db:reset                           # " "db:rollback                        # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear              # Clear a db/schema_cache.dump file" "db:schema:cache:dump               # Create a db/schema_cache.dump file" "db:schema:dump                     # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                     # Load a schema.rb file into the database" "db:schema:load_if_ruby             # " "db:seed                            # Load the seed data from db/seeds.rb" "db:setup                           # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                  # Dump the database structure to db/structure.sql" "db:structure:load                  # Recreate the databases from the structure.sql file" "db:structure:load_if_sql           # " "db:test:clone                      # " "db:test:clone_schema               # " "db:test:clone_structure            # " "db:test:deprecated                 # " "db:test:load                       # " "db:test:load_schema                # " "db:test:load_structure             # " "db:test:prepare                    # " "db:test:purge                      # " "db:version                         # Retrieves the current schema version number" "default                            # " "doc                                # " "doc/app                            # " "doc/app/created.rid                # " "doc:app                            # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                        # " "doc:clobber_app                    # " "doc:clobber_rails                  # " "doc:guides                         # " "doc:rails                          # " "doc:reapp                          # " "doc:rerails                        # " "environment                        # " "html                               # " "html/created.rid                   # " "log:clear                          # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                         # Prints out your Rack middleware stack" "notes                              # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                       # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                        # " "notes:optimize                     # " "notes:todo                         # " "rails:template                     # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy               # " "rails:update                       # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                   # " "rails:update:configs               # " "railties:install:migrations        # " "routes                             # Print out all defined routes in match order, with names" "secret                             # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                               # Run all specs in spec directory (excluding plugin specs)" "spec:features                      # Run the code examples in spec/features" "spec:prepare                       # " "spec:statsetup                     # " "stats                              # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                     # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                   # " "time:zones:us                      # " "tmp                                # " "tmp/cache                          # " "tmp/cache/assets                   # " "tmp/cache/assets/development       # " "tmp/cache/assets/production        # " "tmp/cache/assets/test              # " "tmp/pids                           # " "tmp/sessions                       # " "tmp/sockets                        # " "tmp:cache:clear                    # " "tmp:clear                          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                         # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                     # " "tmp:sessions:clear                 # " "tmp:sockets:clear                  # ")))