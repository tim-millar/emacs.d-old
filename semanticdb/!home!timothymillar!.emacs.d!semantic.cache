;; Object .emacs.d/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file ".emacs.d/"
  :tables
  (list
    (semanticdb-table "init.el"
      :tags 
        '( ("\"server\"" load nil nil [26 41])
            ("(server-running-p)" unless nil nil [42 86])
            ("package" include nil nil [108 126])
            ("json" include nil nil [127 142])
            ("package-archives '((\"gnu\" . \"https://elpa.gnu.org/packages/\") (\"marmalade\" . \"https://marmalade-repo.org/packages/\") (\"melpa\" . \"https://melpa.org/packages/\"))" setq nil nil [143 359])
            ("package-initialize" code nil nil [360 380])
            ("'load-path \"~/.emacs.d/custom\"" add-to-list nil nil [422 466])
            ("'load-path \"~/.emacs.d/elpa/\"" add-to-list nil nil [467 510])
            ("inhibit-splash-screen t" setq nil nil [532 562])
            ("'initial-frame-alist '(fullscreen . maximized)" add-to-list nil nil [607 667])
            ("all-the-icons" use-package nil nil [686 860])
            ("emojify" use-package nil nil [880 1043])
            ("org-install" include nil nil [1091 1113])
            ("'auto-mode-alist '(\"\\\\.org$\" . org-mode)" add-to-list nil nil [1114 1168])
            ("'org-mode-hook 'turn-on-font-lock" add-hook nil nil [1169 1213])
            ("global-map \"\\C-cl\" 'org-store-link" define-key nil nil [1260 1307])
            ("global-map \"\\C-ca\" 'org-agenda" define-key nil nil [1308 1351])
            ("org-log-done t" setq nil nil [1352 1373])
            ("ox-md" include nil nil [1374 1390])
            ("org-agenda-files (list \"~/my-stuff/org/todo.org\" \"~/my-stuff/org/logs.org\"  \"~/my-stuff/org/notes.org\" 			     \"~/my-stuff/org/comments.org\")" setq nil nil [1441 1647])
            ("(kbd \"C-c c\") 'org-capture" global-set-key nil nil [1660 1703])
            ("org-capture-templates '((\"t\" \"Agenda Todo\" entry 	 (file+headline \"~/my-stuff/org/todo.org\" \"Agenda\") 	 \"\\n\\n** TODO %?\\n%T\\n\\n%i\\n%a\\n\\n\\n\" 	 :empty-lines 1)  	(\"n\" \"Agenda Notes\" entry 	 (file+headline \"~/my-stuff/org/todo.org\" \"Agenda\") 	 \"\\n\\n** %?\\n%T\\n%i\\n%a\\n\\n\\n\" 	 :empty-lines 1))" setq nil nil [1704 2007])
            ("org-agenda-skip-additional-timestamps nil" setq nil nil [2039 2087])
            ("tm/org-time-stamp" function nil nil [2088 2221])
            ("global-map (kbd \"<f9>\") 'tm/org-time-stamp" define-key nil nil [2222 2277])
            ("org-babel-do-load-languages" code nil nil [2314 2690])
            ("org-src-fontify-natively t" setq nil nil [2722 2755])
            ("org-hide-emphasis-markers t" setq nil nil [2788 2822])
            ("org-bullets" include nil nil [2839 2861])
            ("'org-mode-hook (lambda () (org-bullets-mode 1))" add-hook nil nil [2862 2920])
            ("font-lock-add-keywords" code nil nil [2952 3129])
            ("\"\\C-x\\C-g\" 'goto-line" global-set-key nil nil [3163 3201])
            ("[f1] 'compile" global-set-key nil nil [3202 3232])
            ("[f2] 'next-error" global-set-key nil nil [3233 3266])
            ("(kbd \"C-x K\") 'kill-this-buffer" global-set-key nil nil [3267 3315])
            ("tool-bar-mode" code nil nil [3339 3357])
            ("menu-bar-mode" code nil nil [3379 3397])
            ("show-paren-mode" code nil nil [3427 3446])
            ("column-number-mode t" setq nil nil [3478 3505])
            ("scroll-bar-mode" code nil nil [3543 3563])
            ("blink-cursor-mode" code nil nil [3586 3607])
            ("global-hl-line-mode" code nil nil [3634 3657])
            ("winner-mode" code nil nil [3673 3688])
            ("windmove-default-keybindings" code nil nil [3701 3731])
            ("windmove-wrap-around t" setq nil nil [3732 3761])
            ("sentence-end-double-space nil" setq nil nil [3799 3835])
            ("(kbd \"C-S-<left>\") 'shrink-window-horizontally" global-set-key nil nil [3854 3917])
            ("(kbd \"C-S-<right>\") 'enlarge-window-horizontally" global-set-key nil nil [3918 3983])
            ("(kbd \"C-S-<down>\") 'shrink-window" global-set-key nil nil [3984 4034])
            ("(kbd \"C-S-<up>\") 'enlarge-window" global-set-key nil nil [4035 4084])
            ("'kill-emacs-query-functions (lambda () (y-or-n-p \"Do you really want to exit Emacs? \"))" add-hook nil nil [4105 4231])
            ("scroll-preserve-screen-position 1" setq nil nil [4279 4319])
            ("(kbd \"M-n\") (kbd \"C-u 1 C-v\")" global-set-key nil nil [4356 4402])
            ("(kbd \"M-p\") (kbd \"C-u 1 M-v\")" global-set-key nil nil [4403 4449])
            ("compilation-ansi-color-process-output" function nil nil [4495 4655])
            ("'compilation-filter-hook #'compilation-ansi-color-process-output" add-hook nil nil [4656 4731])
            ("setup-alias" include nil nil [4752 4774])
            ("set-register" code nil nil [4824 4875])
            ("set-register" code nil nil [4876 4917])
            ("set-register" code nil nil [4918 4975])
            ("indent-tabs-mode nil" setq-default nil nil [4989 5024])
            ("whitespace" include nil nil [5044 5065])
            ("\"\\C-c\\w\" 'whitespace-mode" global-set-key nil nil [5066 5108])
            ("\"\\C-c_t\" 'whitespace-toggle-options" global-set-key nil nil [5109 5161])
            ("explicit-shell-file-name \"/usr/bin/zsh\"" setq nil nil [5196 5242])
            ("shell-file-name \"zsh\"" setq nil nil [5243 5271])
            ("explicit-zsh-args '(\"--login\" \"-i\")" setq nil nil [5272 5314])
            ("setenv" code nil nil [5315 5347])
            ("all-the-icons" use-package nil nil [5349 5376])
            ("goto-chg" include nil nil [5399 5418])
            ("(kbd \"C-.\") 'goto-last-change" global-set-key nil nil [5419 5465])
            ("(kbd \"C-,\") 'goto-last-change-reverse" global-set-key nil nil [5466 5520])
            ("uniquify" include nil nil [5571 5590])
            ("uniquify-buffer-name-style 'forward" setq nil nil [5591 5633])
            ("saveplace" include nil nil [5681 5701])
            ("save-place t" setq-default nil nil [5702 5729])
            ("(kbd \"M-/\") 'hippie-expand" global-set-key nil nil [5730 5773])
            ("(kbd \"C-x C-b\") 'ibuffer" global-set-key nil nil [5774 5815])
            ("x-select-enable-clipboard t" setq nil nil [5816 5977])
            ("unfill-paragraph" function
               (:user-visible-flag t
                :arguments ("region"))
                nil [6056 6407])
            ("global-map \"\\M-Q\" 'unfill-paragraph" define-key nil nil [6433 6481])
            ("'ibuffer-hook (lambda () (ibuffer-auto-mode 1) (add-to-list 'ibuffer-never-show-predicates \"^\\\\*helm\") (add-to-list 'ibuffer-never-show-predicates \"^\\\\*magit\") (setq ibuffer-show-empty-filter-groups nil) (ibuffer-vc-set-filter-groups-by-vc-root) (unless (eq ibuffer-sorting-mode 'alphabetic) (ibuffer-do-sort-by-alphabetic)))" add-hook nil nil [6497 6929])
            ("ibuffer-formats '((mark modified read-only vc-status-mini \" \" (name 18 18 :left :elide) \" \" (size 9 -1 :right) \" \" (mode 16 16 :left :elide) \" \" (vc-status 16 16 :left) \" \" filename-and-process))" setq nil nil [6930 7264])
            ("backup-by-copying t" setq nil nil [7309 7335])
            ("my-backup-file-name" function (:arguments ("fpath")) nil [7397 7909])
            ("make-backup-file-name-function 'my-backup-file-name" setq nil nil [7910 7968])
            ("async" use-package nil nil [8027 8089])
            ("dired-recursive-copies (quote always)" setq nil nil [8148 8192])
            ("dired-recursive-deletes (quote top)" setq nil nil [8220 8262])
            ("dired-dwim-target t" setq nil nil [8286 8312])
            ("dirtree" include nil nil [8323 8341])
            ("(kbd \"s-d\") 'dirtree" global-set-key nil nil [8342 8379])
            ("dired-details" include nil nil [8396 8420])
            ("dired-details-install" code nil nil [8421 8444])
            ("\"info\"" eval-after-load nil nil [8455 8497])
            ("setup-eshell" include nil nil [8521 8544])
            ("global-anzu-mode" code nil nil [8554 8575])
            ("which-function-mode" code nil nil [8596 8619])
            ("\"which-func\"" eval-after-load nil nil [8620 8728])
            ("helm" use-package nil nil [8764 8792])
            ("setup-helm" include nil nil [8793 8814])
            ("helm-flx-mode" code nil nil [8815 8832])
            ("helm-fuzzier-mode" code nil nil [8833 8854])
            ("helm-themes" use-package nil nil [8855 8890])
            ("helm-dash-browser-func 'eww" setq nil nil [8904 8938])
            ("(kbd \"C-c g g\") 'helm-git-grep" global-set-key nil nil [8956 9003])
            ("isearch-mode-map (kbd \"C-c g g\") 'helm-git-grep-from-isearch" define-key nil nil [9044 9117])
            ("'helm" eval-after-load nil nil [9161 9250])
            ("helm-dash" use-package nil nil [9371 9653])
            ("avy-setup-default" code nil nil [9679 9698])
            ("(kbd \"C-#\") 'avy-goto-char" global-set-key nil nil [9699 9742])
            ("(kbd \"C-'\") 'avy-goto-char-2" global-set-key nil nil [9743 9788])
            ("(kbd \"M-g f\") 'avy-goto-line" global-set-key nil nil [9789 9834])
            ("(kbd \"M-g w\") 'avy-goto-word-1" global-set-key nil nil [9835 9882])
            ("(kbd \"M-g e\") 'avy-goto-word-0" global-set-key nil nil [9883 9930])
            ("rainbow-delimiters" include nil nil [9953 9982])
            ("'prog-mode-hook #'rainbow-delimiters-mode" add-hook nil nil [9983 10035])
            ("nlinum-relative" include nil nil [10056 10082])
            ("'prog-mode-hook 'nlinum-relative-mode" add-hook nil nil [10083 10131])
            ("nlinum-relative-current-symbol \"->\"" setq nil nil [10132 10174])
            ("pretty-lambdada" include nil nil [10194 10220])
            ("pretty-lambda-for-modes" code nil nil [10221 10246])
            ("color-theme-approximate-on" code nil nil [10283 10311])
            ("'load-path \"~/.emacs.d/elpa/\"" add-to-list nil nil [10327 10370])
            ("yasnippet" include nil nil [10371 10391])
            ("yas-global-mode" code nil nil [10392 10411])
            ("yas-minor-mode-map (kbd \"<tab>\") nil" define-key nil nil [10412 10461])
            ("yas-minor-mode-map (kbd \"TAB\") nil" define-key nil nil [10462 10509])
            ("yas-minor-mode-map (kbd \"<C-tab>\") 'yas-expand" define-key nil nil [10510 10569])
            ("[?\\C-c ?g ?b] 'mo-git-blame-current" global-set-key nil nil [10647 10699])
            ("[?\\C-c ?g ?f] 'mo-git-blame-file" global-set-key nil nil [10700 10749])
            ("(kbd \"C-x g\") 'magit-status" global-set-key nil nil [10750 10794])
            ("magit-refs-local-branch-format \"%4c %-25n %h %U%m\\n\"" setq nil nil [10795 10854])
            ("(kbd \"C-c g t\") 'git-timemachine-toggle" global-set-key nil nil [10871 10927])
            ("(kbd \"C-c g m\") 'git-messenger:popup-message" global-set-key nil nil [10946 11007])
            ("'git-messenger:popup-buffer-hook 'magit-commit-mode" add-hook nil nil [11135 11197])
            ("(kbd \"C-c g s\") 'smeargle" global-set-key nil nil [11211 11253])
            ("(kbd \"C-c g c\") 'smeargle-commits" global-set-key nil nil [11254 11304])
            ("(kbd \"C-c g r\") 'smeargle-clear" global-set-key nil nil [11305 11353])
            ("magit-gh-pulls" include nil nil [11557 11582])
            ("'magit-mode-hook 'turn-on-magit-gh-pulls" add-hook nil nil [11583 11634])
            ("(kbd \"C-c g o\") 'github-browse-file" global-set-key nil nil [11635 11687])
            ("(kbd \"C-c g l\") 'git-link" global-set-key nil nil [11688 11730])
            ("projectile-mode" code nil nil [11767 11784])
            ("projectile-mode-line '(:eval (format \" [%s]\" (projectile-project-name)))" setq nil nil [11785 11864])
            ("projectile-completion-system 'helm" setq nil nil [11865 11906])
            ("helm-projectile-on" code nil nil [11907 11927])
            ("'projectile-mode-hook 'projectile-rails-on" add-hook nil nil [11948 12001])
            ("projectile-rails-global-mode" code nil nil [12002 12032])
            ("neotree" use-package nil nil [12262 12635])
            ("exec-path (append exec-path '(\"/usr/bin/ctags\"))" setq nil nil [13115 13170])
            ("ggtags" include nil nil [13171 13188])
            ("setup-helm-gtags" include nil nil [13321 13348])
            ("'auto-mode-alist '(\"\\\\.log\\\\'\" . auto-revert-mode)" add-to-list nil nil [13378 13442])
            ("package-initialize" code nil nil [13464 13484])
            ("'load-path \"~/.emacs.d/elpa/\"" add-to-list nil nil [13532 13575])
            ("smartparens-global-mode" code nil nil [13576 13603])
            ("smartparens-config" include nil nil [13604 13633])
            ("smartparens-ruby" include nil nil [13634 13661])
            ("sp-with-modes" code nil nil [13662 13743])
            ("web-mode-edit-element" include nil nil [13744 13776])
            ("'web-mode-hook 'web-mode-edit-element-minor-mode" add-hook nil nil [13777 13836])
            ("set-frame-font" code nil nil [13867 13904])
            ("creamsody-theme" use-package nil nil [13964 14012])
            ("darkokai-theme" use-package nil nil [14013 14060])
            ("darktooth-theme" use-package nil nil [14061 14109])
            ("gruvbox-theme" use-package nil nil [14110 14156])
            ("monokai-theme" use-package nil nil [14157 14203])
            ("spacemacs-theme" use-package nil nil [14204 14252])
            ("powerline" include nil nil [14272 14292])
            ("powerline-default-theme" code nil nil [14293 14318])
            ("mode-line-height" variable (:default-value 30) nil [14319 14347])
            ("darkokai-mode-line-padding 1" setq nil nil [14348 14383])
            ("load-theme" code nil nil [14415 14439])
            ("spaceline-config" include nil nil [14717 14744])
            ("spaceline-emacs-theme" code nil nil [14745 14768])
            ("spaceline-toggle-minor-modes-off" code nil nil [14813 14847])
            ("spaceline-helm-mode" code nil nil [14848 14871])
            ("spaceline-info-mode" code nil nil [14872 14895])
            ("erc-hide-list '(\"JOIN\" \"PART\" \"QUIT\")" setq nil nil [15000 15044])
            ("erc-image" include nil nil [15058 15078])
            ("'erc-modules 'image" add-to-list nil nil [15079 15112])
            ("erc-update-modules" code nil nil [15113 15133])
            ("erc-yt" include nil nil [15150 15167])
            ("'erc-modules 'youtube" add-to-list nil nil [15168 15203])
            ("erc-update-modules" code nil nil [15204 15224])
            ("re-builder" include nil nil [15267 15288])
            ("reb-re-syntax 'string" setq nil nil [15289 15317])
            ("markdown-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15349 15435])
            ("'auto-mode-alist '(\"\\\\.md$\" . markdown-mode)" add-to-list nil nil [15436 15494])
            ("undo-tree" include nil nil [15509 15529])
            ("global-undo-tree-mode" code nil nil [15530 15553])
            ("expand-region" include nil nil [15572 15596])
            ("(kbd \"C-=\") 'er/expand-region" global-set-key nil nil [15597 15643])
            ("[remap kill-ring-save] 'easy-kill" global-set-key nil nil [15658 15708])
            ("let" code nil nil [15746 15939])
            ("which-key" use-package nil nil [16054 16151])
            ("ansi-color" include nil nil [16189 16210])
            ("tm/ansi-colorize-buffer" function nil nil [16211 16335])
            ("'compilation-filter-hook 'tm/ansi-colorize-buffer" add-hook nil nil [16336 16396])
            ("multiple-cursors" include nil nil [16423 16450])
            ("(kbd \"C-S-c C-S-c\") 'mc/edit-lines" global-set-key nil nil [16451 16502])
            ("(kbd \"C->\") 'mc/mark-next-like-this" global-set-key nil nil [16503 16555])
            ("(kbd \"C-<\") 'mc/mark-previous-like-this" global-set-key nil nil [16556 16612])
            ("(kbd \"C-c C-<\") 'mc/mark-all-like-this" global-set-key nil nil [16613 16668])
            ("auto-complete" include nil nil [16686 16710])
            ("auto-complete-config" include nil nil [16711 16742])
            ("ac-config-default" code nil nil [16760 16779])
            ("ac-ignore-case nil" setq nil nil [16780 16805])
            ("tramp" include nil nil [16854 16870])
            ("'auto-mode-alist '(\"\\\\.http\\\\'\" . restclient-mode)" add-to-list nil nil [16900 16964])
            ("[f6] 'flycheck-mode" global-set-key nil nil [17039 17075])
            ("elfeed" use-package nil nil [17097 17606])
            ("web-mode" include nil nil [17620 17639])
            ("'auto-mode-alist '(\"\\\\.phtml\\\\'\" . web-mode)" add-to-list nil nil [17640 17698])
            ("'auto-mode-alist '(\"\\\\.tpl\\\\.php\\\\'\" . web-mode)" add-to-list nil nil [17699 17761])
            ("'auto-mode-alist '(\"\\\\.[agj]sp\\\\'\" . web-mode)" add-to-list nil nil [17762 17822])
            ("'auto-mode-alist '(\"\\\\.as[cp]x\\\\'\" . web-mode)" add-to-list nil nil [17823 17883])
            ("'auto-mode-alist '(\"\\\\.erb\\\\'\" . web-mode)" add-to-list nil nil [17884 17940])
            ("'auto-mode-alist '(\"\\\\.ejs\\\\'\" . web-mode)" add-to-list nil nil [17941 17997])
            ("'auto-mode-alist '(\"\\\\.mustache\\\\'\" . web-mode)" add-to-list nil nil [17998 18059])
            ("'auto-mode-alist '(\"\\\\.djhtml\\\\'\" . web-mode)" add-to-list nil nil [18060 18119])
            ("my-web-mode-hook" function nil nil [18128 18259])
            ("'my-web-mode-hook 'whitespace-cleanup-mode" add-hook nil nil [18309 18362])
            ("'web-mode-hook  'my-web-mode-hook" add-hook nil nil [18363 18407])
            ("js-indent-level 2" setq nil nil [18422 18446])
            ("rbenv" include nil nil [18476 18492])
            ("global-rbenv-mode" code nil nil [18493 18512])
            ("rbenv-modeline-function 'rbenv--modeline-plain" setq nil nil [18513 18566])
            ("ruby-mode-hook" function nil nil [18585 19544])
            ("'ruby-mode-hook 'whitespace-cleanup-mode" add-hook nil nil [19592 19643])
            ("'ruby-mode-hook 'column-enforce-mode" add-hook nil nil [19644 19691])
            ("'ruby-mode-hook 'ruby-refactor-mode-launch" add-hook nil nil [19692 19745])
            ("rspec-mode" include nil nil [19765 19786])
            ("'dired-mode-hook 'rspec-dired-mode" add-hook nil nil [19787 19832])
            ("'rspec-mode" eval-after-load nil nil [19833 19890])
            ("rspec-use-spring-when-possible nil" setq nil nil [19891 19932])
            ("yaml-mode" include nil nil [19946 19966])
            ("'auto-mode-alist '(\"\\\\.yml$\" . yaml-mode)" add-to-list nil nil [19967 20022])
            ("'auto-mode-alist '(\"\\\\.yaml$\" . yaml-mode)" add-to-list nil nil [20023 20079])
            ("'auto-mode-alist '(\"\\\\.yml.example$\" . yaml-mode)" add-to-list nil nil [20080 20143])
            ("exec-path (append exec-path '(\"/home/timothymillar/.cabal/bin\"))" setq nil nil [20372 20443])
            ("'haskell-mode-hook 'interactive-haskell-mode" add-hook nil nil [20444 20499])
            ("intero" use-package nil nil [20500 20532])
            ("'haskell-mode-hook 'intero-mode" add-hook nil nil [20533 20575])
            ("'haskell-mode-hook '(lambda () (setq haskell-indentation-mode t) )" add-hook nil nil [20649 20790])
            ("'haskell-mode" eval-after-load nil nil [20805 20900])
            ("'haskell-mode" eval-after-load nil nil [20901 21568])
            ("haskell-font-lock-symbols" variable nil nil [21588 21622])
            ("haskell-font-lock-symbols t" setq nil nil [21623 21657])
            ("'racket-mode-hook (lambda () (local-unset-key \"<f5>\"))" add-hook nil nil [21676 21763])
            ("'emacs-lisp-mode-hook (lambda () (lispy-mode 1))" add-hook nil nil [21779 21838])
            ("'racket-mode-hook (lambda () (lispy-mode 1))" add-hook nil nil [21839 21894])
            ("clojure-mode" use-package nil nil [22001 22264])
            ("cider" use-package nil nil [22266 22345])
            ("4clojure" use-package nil nil [22347 22851])
            ("endless/4clojure-check-and-proceed" function (:user-visible-flag t) nil [22853 23531])
            ("4clojure/start-new-problem" function (:arguments ("after" "endless/4clojure/start-new-problem-advice" "nil" "activate")) nil [23533 23946])
            ("diminish" include nil nil [24031 24050])
            ("diminish" code nil nil [24051 24077])
            ("diminish" code nil nil [24078 24113])
            ("diminish" code nil nil [24114 24144])
            ("diminish" code nil nil [24145 24171])
            ("diminish" code nil nil [24172 24200])
            ("diminish" code nil nil [24201 24222])
            ("diminish" code nil nil [24223 24244])
            ("diminish" code nil nil [24245 24272])
            ("diminish" code nil nil [24273 24299])
            ("diminish" code nil nil [24300 24327])
            ("diminish" code nil nil [24328 24356])
            ("diminish" code nil nil [24357 24379])
            ("diminish" code nil nil [24380 24413])
            ("diminish" code nil nil [24414 24445])
            ("'exec-path \"~/bin\"" add-to-list nil nil [24447 24479])
            ("custom-set-variables" code nil nil [24481 25504])
            ("custom-set-faces" code nil nil [25506 25745])
            ("'dired-find-alternate-file 'disabled nil" put nil nil [25746 25792])
            ("'narrow-to-region 'disabled nil" put nil nil [25794 25831])
            ("'narrow-to-page 'disabled nil" put nil nil [25832 25867])
            ("'upcase-region 'disabled nil" put nil nil [25868 25902]))          
      :file "init.el"
      :fsize 25921
      :lastmodtime '(22612 37015 904043 690000))
    (semanticdb-table ".mc-lists.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mc/cmds-to-run-for-all '( backward-sexp easy-kill electric-newline-and-maybe-indent eval-print-last-sexp haskell-indentation-common-electric-command haskell-mode-contextual-space helm-M-x helm-show-kill-ring kill-region lispy-braces lispy-brackets lispy-delete lispy-delete-backward lispy-kill lispy-parens lispy-quotes org-delete-char orgtbl-self-insert-command special-digit-argument special-lh-knight/body special-lispy-ace-char special-lispy-ace-paren special-lispy-ace-subword special-lispy-ace-symbol special-lispy-ace-symbol-replace special-lispy-alt-multiline special-lispy-back special-lispy-barf special-lispy-beginning-of-defun special-lispy-clone special-lispy-convolute special-lispy-convolute-left special-lispy-different special-lispy-down special-lispy-down-slurp special-lispy-edebug-stop special-lispy-ediff-regions special-lispy-eval special-lispy-eval-and-insert special-lispy-eval-other-window special-lispy-flow special-lispy-follow special-lispy-goto special-lispy-goto-def-ace special-lispy-goto-def-down special-lispy-goto-elisp-commands special-lispy-goto-local special-lispy-goto-mode special-lispy-goto-projectile special-lispy-goto-recursive special-lispy-join special-lispy-left special-lispy-mark-list special-lispy-move-down special-lispy-move-left special-lispy-move-right special-lispy-move-up special-lispy-narrow special-lispy-new-copy special-lispy-occur special-lispy-oneline special-lispy-other-mode special-lispy-other-space special-lispy-outline-goto-child special-lispy-outline-next special-lispy-outline-prev special-lispy-paste special-lispy-quit special-lispy-raise special-lispy-raise-some special-lispy-repeat special-lispy-right special-lispy-shifttab special-lispy-slurp special-lispy-splice special-lispy-stringify special-lispy-tab special-lispy-teleport special-lispy-tilde special-lispy-underscore special-lispy-undo special-lispy-up special-lispy-up-slurp special-lispy-view special-lispy-visit special-lispy-widen special-lispy-x special-pop-tag-mark wdired-finish-edit )" setq nil nil [159 2918])
            ("mc/cmds-to-run-once '( end-of-buffer haskell-process-load-or-reload helm-gtags-select lispy-cursor-down yas-expand )" setq nil nil [2920 3097]))          
      :file ".mc-lists.el"
      :pointmax 3098
      :fsize 3097
      :lastmodtime '(22607 16918 704640 883000)
      :unmatched-syntax nil))
  :file "!home!timothymillar!.emacs.d!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
